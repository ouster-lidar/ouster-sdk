# supported ubuntu:18.04. ubuntu20.04 and debian:10 as base
ARG BASE="ubuntu:18.04"

FROM ${BASE}
LABEL repo="ouster_example" app="ouster-sdk-python" base="${BASE}"

ARG BUILD_UID=1000
ARG BUILD_GID=1000

# place to store JUnit xml test resports
ARG ARTIFACT_DIR=/opt/artifacts

# default place to mount Ouster SDK root directory (i.e. root ouster-example)
ARG OUSTER_SDK_PATH=/opt/ws/ouster_sdk

# set Ouster HQ timezone
RUN set -eux && ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

RUN set -xe \
&& export DEBIAN_FRONTEND=noninteractive \
# ouster-sdk-python extensions build depenencies
# NOTE: No ouster_viz/ros dependencies included here.
&& apt-get update \
&& apt-get install -y build-essential \
                      libeigen3-dev \
                      libjsoncpp-dev \
                      libtins-dev \
                      libpcap-dev \
# Installing common python version that is present on recent Debian based distros
                      python3-venv \
# Used only for manual build inside container (tox is using cmake deps from pyproject.toml)
                      cmake

# ======= Ubuntu 18.04 (bionic) dependencies =============================
RUN set -xe && . /etc/os-release \
&& if [ "$ID" = "ubuntu" -a "$VERSION_ID" = "18.04" ]; then \
apt-get install -y python3.6-dev \
                   python3.7-dev \
                   python3.8-dev \
                   pybind11-dev \
;fi


# ======= Ubuntu 20.04 (focal) dependencies =============================
RUN set -xe && . /etc/os-release \
&& if [ "$ID" = "ubuntu" -a "$VERSION_ID" = "20.04" ]; then \
apt-get install -y python3.8-dev \
                   python3.9-dev \
                   pybind11-dev \
;fi


# ======= Debian 10 (buster) dependencies ===============================
RUN set -xe && . /etc/os-release \
&& if [ "$ID" = "debian" -a "$VERSION_ID" = "10" ]; then \
apt-get install -y python3.7-dev \
                   pybind11-dev \
;fi


RUN addgroup --gid ${BUILD_GID} build \
&& useradd build -m -u ${BUILD_UID} -g ${BUILD_GID} -d /opt/ws

RUN mkdir -pv ${ARTIFACT_DIR} && chown -R build:build ${ARTIFACT_DIR}

# settings for humans going into container (debug stuff, etc), uncomment this
# RUN echo "build:ouster" | chpasswd && adduser build sudo \
# && apt-get install -y sudo iputils-ping tree

ENV WORKDIR=/opt/ws
USER ${BUILD_UID}:${BUILD_GID}

ENV \
# Store tox environment outside of source tree
    TOX_WORK_DIR=${WORKDIR}/.tox \
    ARTIFACT_DIR=${ARTIFACT_DIR} \
    OUSTER_SDK_PATH=${OUSTER_SDK_PATH}

WORKDIR ${WORKDIR}


# setup base python environment from where tox will be run
RUN set -xe \
&& python3 -m venv VENV \
&& . ./VENV/bin/activate \
&& pip install -U pip setuptools tox

COPY --chown=${BUILD_UID}:${BUILD_GID} ./python/integration/entrypoint.sh .

# activates base python virtual environment with basic up-to date tools and tox
ENTRYPOINT ["./entrypoint.sh"]

# default command to run default tox testenvs
CMD tox -s -v -c "${OUSTER_SDK_PATH}/python"
