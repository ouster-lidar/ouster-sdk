#!/usr/bin/env groovy

pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
        overrideIndexTriggers(false)
        // checkoutToSubdirectory('ouster_sw')
        buildDiscarder(logRotator(numToKeepStr: env.BRANCH_NAME == 'master' ? '20' : '5'))
    }

    environment {
        MAKEFLAGS = sh(script: 'echo -j$(nproc) -l$(nproc)', returnStdout: true).trim()
    }

    stages {
        stage('Prep') {
            steps {
                sh 'export'
            }
        }
        
        stage('Build') {
            parallel {
                stage('Build Windows Client') {
                    agent {label 'windows'}

                    steps {
                        // on windows 'GitLFSPull' is required to avoid error during checkout. But
                        // this breaks merging PRs into master on linux. TODO: put this in utils
                        // https://issues.jenkins-ci.org/browse/JENKINS-52935
                        checkout([
                             $class: 'GitSCM',
                             branches: scm.branches,
                             doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                             extensions: scm.extensions + [ $class: 'GitLFSPull' ],
                             userRemoteConfigs: scm.userRemoteConfigs
                        ])

                        powershell script: '''
                            # Make sure we error out on errors
                            $ErrorActionPreference = "Stop"
                            Set-PSDebug -Trace 1

                            # These string replaces are needed as jenkins for some
                            # reason likes to mess up the path variable
                            $env:PATH = $env:PATH -replace ";;",";"
                            $env:PATH = $env:PATH -replace '"',''

                            # The build executes from root as that is how linux is set up
                            ./apps/sensor-client-integration/standard/windows/make_vs_project.bat
                            ./apps/sensor-client-integration/standard/windows//build.bat
                        

                            if($LASTEXITCODE -ne 0) {
                                throw "Build Failed"
                            }
                        '''
                    }
                }
                stage('Build Linux Client') {
                    steps {
                        checkout scm

                        sh '''
                        cd ./apps/sensor-client-integration/standard/linux/
                        ./docker_build_shared_sw.sh
                        '''
                    }
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Test Windows Client') {
                    agent {label 'windows'}
                    steps {
                        withCredentials([file(credentialsId: 'ouster-build-gcs', variable: 'AUTH_FILE')]) {
                            powershell script: """
                            gcloud auth activate-service-account --key-file=$AUTH_FILE
                            ./apps/sensor-client-integration/standard/windows/test.bat
                            if (\$LASTEXITCODE -ne 0) {throw 'Build Failed'}
                            """
                        }
                    }
                }
                
                stage('Test Linux Client') {
                    steps {
                        withCredentials([file(credentialsId: 'ouster-build-gcs', variable: 'AUTH_FILE')]) {
                        sh script: '''
                        cd ./apps/sensor-client-integration/standard/linux/
                        gcloud auth activate-service-account --key-file=${AUTH_FILE}
                        ./docker_test_shared_sw.sh

                    '''
                        }
                    }
                }
            }
        }
    } // stages
}
